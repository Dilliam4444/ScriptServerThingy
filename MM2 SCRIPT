-- Load Rayfield
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Create main window
local Window = Rayfield:CreateWindow({
    Name = "üî™ MM2 FULL MENU",
    Theme = "Dark",
})

-- Create tabs
local tabMain = Window:CreateTab("üè† Main")
local tabESP = Window:CreateTab("‚≠ï ESP")
local tabRoles = Window:CreateTab("üé≠ Roles")
local tabAutofarm = Window:CreateTab("üöÄ Autofarm")
local tabMisc = Window:CreateTab("üõ† Misc")

-- Create sections inside each tab
local secMain = tabMain:CreateSection("Main Features")
local secESP = tabESP:CreateSection("ESP Features")
local secRoles = tabRoles:CreateSection("Roles Features")
local secAutofarm = tabAutofarm:CreateSection("Autofarm")
local secMisc = tabMisc:CreateSection("Utilities & Misc")

-- References
local Players = game:GetService("Players")
local Client = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local Character, Humanoid, RootPart
local function updateChar()
    Character = Client.Character or Client.CharacterAdded:Wait()
    Humanoid = Character:FindFirstChildOfClass("Humanoid")
    RootPart = Character:FindFirstChild("HumanoidRootPart")
end
updateChar()
Client.CharacterAdded:Connect(updateChar)

-- ============================
-- Main Features UI (inside secMain)
-- ============================

-- Ctrl click tp
secMain:CreateToggle({
    Name = "CTRL click tp",
    Default = false,
    Callback = function(val)
        getgenv().ClickTP = val
    end
})
local Mouse = Client:GetMouse()
Mouse.Button1Down:Connect(function()
    if not getgenv().ClickTP then return end
    if not UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then return end
    if not Mouse.Target then return end
    if not Character or not Character:FindFirstChild("HumanoidRootPart") then return end
    Character:MoveTo(Mouse.Hit.p)
end)

-- WalkSpeed slider
secMain:CreateSlider({
    Name = "WalkSpeed",
    Min = 16,
    Max = 200,
    Default = 16,
    Callback = function(val)
        if Humanoid then Humanoid.WalkSpeed = val end
    end
})

-- JumpPower slider
secMain:CreateSlider({
    Name = "JumpPower",
    Min = 50,
    Max = 200,
    Default = 50,
    Callback = function(val)
        if Humanoid then Humanoid.JumpPower = val end
    end
})

-- Infinite Jump toggle
secMain:CreateToggle({
    Name = "Infinite Jump",
    Default = false,
    Callback = function(val)
        getgenv().InfiniteJump = val
    end
})
UserInputService.JumpRequest:Connect(function()
    if getgenv().InfiniteJump and Humanoid and Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
        Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- Fly toggle
local flying = false
local flyVelocity, flyAngular
secMain:CreateToggle({
    Name = "Fly",
    Default = false,
    Callback = function(val)
        getgenv().Fly = val
        if val then
            if not Character or not Character:FindFirstChild("Head") then return end
            local Head = Character.Head
            Humanoid.PlatformStand = true
            flyVelocity = Instance.new("BodyVelocity", Head)
            flyVelocity.Velocity = Vector3.new(0,0,0)
            flyVelocity.MaxForce = Vector3.new(1e5,1e5,1e5)
            flyVelocity.P = 1000
            flyAngular = Instance.new("BodyAngularVelocity", Head)
            flyAngular.AngularVelocity = Vector3.new(0,0,0)
            flyAngular.MaxTorque = Vector3.new(1e5,1e5,1e5)
            flyAngular.P = 1000
        else
            if flyVelocity then flyVelocity:Destroy() end
            if flyAngular then flyAngular:Destroy() end
            if Humanoid then Humanoid.PlatformStand = false end
        end
    end
})
secMain:CreateSlider({
    Name = "Fly Speed",
    Min = 20,
    Max = 150,
    Default = 50,
    Callback = function(val)
        getgenv().FlySpeed = val
    end
})
local moveKeys = {W=false; A=false; S=false; D=false}
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.W then moveKeys.W = true end
    if input.KeyCode == Enum.KeyCode.S then moveKeys.S = true end
    if input.KeyCode == Enum.KeyCode.A then moveKeys.A = true end
    if input.KeyCode == Enum.KeyCode.D then moveKeys.D = true end
end)
UserInputService.InputEnded:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.W then moveKeys.W = false end
    if input.KeyCode == Enum.KeyCode.S then moveKeys.S = false end
    if input.KeyCode == Enum.KeyCode.A then moveKeys.A = false end
    if input.KeyCode == Enum.KeyCode.D then moveKeys.D = false end
end)
RunService.Heartbeat:Connect(function()
    if getgenv().Fly and Humanoid and Character and Character:FindFirstChild("HumanoidRootPart") then
        local cf = Workspace.CurrentCamera.CFrame
        local moveVec = Vector3.new()
        if moveKeys.W then moveVec = moveVec + cf.lookVector end
        if moveKeys.S then moveVec = moveVec - cf.lookVector end
        if moveKeys.A then moveVec = moveVec - cf.rightVector end
        if moveKeys.D then moveVec = moveVec + cf.rightVector end
        if getgenv().FlySpeed then
            local Head = Character.Head
            if Head then
                if flyVelocity then flyVelocity.Velocity = moveVec * getgenv().FlySpeed end
            end
        end
    end
end)

-- BTools
secMain:CreateButton({
    Name = "BTools",
    Callback = function()
        for _, t in pairs({"Clone", "GameTool", "Hammer", "Script", "Grab"}) do
            local bin = Instance.new("HopperBin")
            bin.BinType = t
            bin.Parent = Client.Backpack
        end
    end
})

-- God Mode
secMain:CreateButton({
    Name = "God Mode",
    Callback = function()
        if Humanoid then Humanoid.MaxHealth = math.huge; Humanoid.Health = math.huge end
    end
})

-- ============================
-- ESP Features (inside secESP)
-- ============================

local ESPFolder = Instance.new("Folder", CoreGui)
ESPFolder.Name = "ESP Holder"

local GunHighlight = Instance.new("Highlight")
local GunHandleAdornment = Instance.new("SphereHandleAdornment")
GunHighlight.FillColor = Color3.fromRGB(248, 241, 174)
GunHighlight.Adornee = Workspace:FindFirstChild("GunDrop")
GunHighlight.OutlineTransparency = 1
GunHighlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
GunHighlight.RobloxLocked = true
GunHighlight.Parent = CoreGui

GunHandleAdornment.Color3 = Color3.fromRGB(248, 241, 174)
GunHandleAdornment.Transparency = 0.2
GunHandleAdornment.Adornee = Workspace:FindFirstChild("GunDrop")
GunHandleAdornment.AlwaysOnTop = true
GunHandleAdornment.AdornCullingMode = Enum.AdornCullingMode.Never
GunHandleAdornment.RobloxLocked = true
GunHandleAdornment.Parent = CoreGui

local function addBillboard(player)
    local billboard = Instance.new("BillboardGui", ESPFolder)
    billboard.Name = player.Name
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.ExtentsOffset = Vector3.new(0, 3, 0)
    local label = Instance.new("TextLabel", billboard)
    label.TextSize = 20
    label.Text = player.Name
    label.Font = Enum.Font.SourceSans
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, 0, 1, 0)
    -- Update loop
    coroutine.wrap(function()
        while player.Parent do
            wait()
            local head = player.Character and player.Character:FindFirstChild("Head")
            if head then billboard.Adornee = head end
            -- change color based on role
            if (player.Character and (player.Character:FindFirstChild("Knife") or player.Backpack:FindFirstChild("Knife"))) then
                label.TextColor3 = Color3.new(1,0,0)
            elseif (player.Character and (player.Character:FindFirstChild("Gun") or player.Backpack:FindFirstChild("Gun"))) then
                label.TextColor3 = Color3.new(0,0,1)
            else
                label.TextColor3 = Color3.new(0,1,0)
            end
        end
    end)()
end

-- Add existing players
for _, p in pairs(Players:GetPlayers()) do
    if p ~= Client then addBillboard(p) end
end
Players.PlayerAdded:Connect(function(p) addBillboard(p) end)
Players.PlayerRemoving:Connect(function(p)
    local b = ESPFolder:FindFirstChild(p.Name)
    if b then b:Destroy() end
end)

-- Toggle Player ESP
secESP:CreateToggle({
    Name = "Player ESP",
    Default = false,
    Callback = function(val)
        getgenv().AllEsp = val
        for _, v in pairs(ESPFolder:GetChildren()) do v.Enabled = val end
    end,
})

-- Toggle Murderer ESP
secESP:CreateToggle({
    Name = "Murderer ESP",
    Default = false,
    Callback = function(val)
        getgenv().MurderEsp = val
    end,
})

-- Toggle Sheriff ESP
secESP:CreateToggle({
    Name = "Sheriff ESP",
    Default = false,
    Callback = function(val)
        getgenv().SheriffEsp = val
    end,
})

-- ============================
-- Misc Utilities (inside secMisc)
-- ============================

local function XrayOn(obj)
    for _,v in pairs(obj:GetChildren()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0.75
        end
        XrayOn(v)
    end
end
local function XrayOff(obj)
    for _,v in pairs(obj:GetChildren()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0
        end
        XrayOff(v)
    end
end
secMisc:CreateToggle({
    Name = "Xray",
    Default = false,
    Callback = function(val)
        getgenv().Xray = val
        if val then XrayOn(Workspace) else XrayOff(Workspace) end
    end,
})

-- Unlock Workspace
secMisc:CreateButton({
    Name = "Unlock Workspace",
    Callback = function()
        local function unlock(obj)
            for _,v in pairs(obj:GetChildren()) do
                if v:IsA("BasePart") then v.Locked = false end
                unlock(v)
            end
        end
        unlock(Workspace)
    end,
})

-- Teleport options
local Teleports = {
    ["Lobby"] = Vector3.new(-121.123,138.273,38.946),
    ["Map"] = Vector3.new(-107.908,138.349,-10.622)
}
local options = {}
for k,v in pairs(Teleports) do table.insert(options, k) end
secMisc:CreateDropdown({
    Name = "Teleport To",
    Options = options,
    Callback = function(option)
        if RootPart then
            if option == "Lobby" then
                RootPart.CFrame = CFrame.new(Teleports["Lobby"])
            elseif option == "Map" then
                RootPart.CFrame = CFrame.new(Teleports["Map"])
            end
        end
    end,
})

-- ============================
-- Autofarm
-- ============================
getgenv().Autofarm = false
getgenv().AutofarmMethod = "Coins"
secAutofarm:CreateToggle({
    Name = "Autofarm",
    Default = false,
    Callback = function(val)
        getgenv().Autofarm = val
        spawn(function()
            while getgenv().Autofarm do
                wait(1)
                if getgenv().AutofarmMethod == "Coins" then
                    local container = workspace:FindFirstChild("CoinContainer", true)
                    if container and Client.PlayerGui:FindFirstChild("MainGUI") and Client.PlayerGui.MainGUI:FindFirstChild("Game") and Client.PlayerGui.MainGUI.Game.CashBag.Visible then
                        local coin = container:FindFirstChild("Coin_Server")
                        if coin then
                            RootPart.CFrame = CFrame.new(coin.Position - Vector3.new(0,2.5,0))
                            wait(1.8)
                        end
                    end
                elseif getgenv().AutofarmMethod == "XP" then
                    if Client.PlayerGui and Client.PlayerGui:FindFirstChild("MainGUI") and Client.PlayerGui.MainGUI:FindFirstChild("Game") and Client.PlayerGui.MainGUI.Game.CashBag.Visible then
                        RootPart.CFrame = CFrame.new(-121.123,138.273,38.946)
                    end
                end
            end
        end)
    end,
})
secAutofarm:CreateDropdown({
    Name = "Autofarm method",
    Options = {"XP", "Coins"},
    Callback = function(val)
        getgenv().AutofarmMethod = val
    end,
})

-- ============================
-- Roles: Silent Aim, Get Gun, Kill Aura
-- ============================

getgenv().SheriffAim = false
secRoles:CreateToggle({
    Name = "Silent Aim",
    Default = false,
    Callback = function(val)
        getgenv().SheriffAim = val
    end,
})

secRoles:CreateSlider({
    Name = "Gun Accuracy",
    Min = 0,
    Max = 100,
    Default = 25,
    Callback = function(val)
        getgenv().GunAccuracy = val
    end,
})

local function updateRoles()
    while true do
        wait(1)
        getgenv().Murderer = nil
        getgenv().Sheriff = nil
        for _, v in pairs(Players:GetPlayers()) do
            if v ~= Client then
                if (v.Backpack:FindFirstChild("Knife") or (v.Character and v.Character:FindFirstChild("Knife"))) then
                    getgenv().Murderer = v.Name
                end
                if (v.Backpack:FindFirstChild("Gun") or (v.Character and v.Character:FindFirstChild("Gun"))) then
                    getgenv().Sheriff = v.Name
                end
            end
        end
    end
end
coroutine.wrap(updateRoles)()

-- Get Gun button
secRoles:CreateButton({
    Name = "Get Gun",
    Callback = function()
        local gundrop = workspace:FindFirstChild("GunDrop")
        if gundrop and RootPart then
            RootPart.CFrame = gundrop.CFrame
        end
    end,
})

-- Kill All button
secRoles:CreateButton({
    Name = "Kill All",
    Callback = function()
        local Knife = Client.Backpack:FindFirstChild("Knife") or Client.Character:FindFirstChild("Knife")
        if not Knife then return end
        for _, v in pairs(Players:GetPlayers()) do
            if v ~= Client and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                local EnemyRoot = v.Character.HumanoidRootPart
                firetouchinterest(EnemyRoot, Knife.Handle, 1)
                firetouchinterest(EnemyRoot, Knife.Handle, 0)
            end
        end
    end,
})

-- Silent Aim setup
local function setupSilentAim()
    local shootEvent = game:GetService("ReplicatedStorage"):WaitForChild("ShootGun")
    local oldInvoke = shootEvent.InvokeServer
    shootEvent.InvokeServer = function(...)
        local args = {...}
        if getgenv().SheriffAim and getgenv().GunAccuracy and getgenv().Murderer then
            local Root = Players[getgenv().Murderer].Character:FindFirstChild("HumanoidRootPart")
            if Root then
                local Vel = Root.AssemblyLinearVelocity
                local Pos = Root.Position + Vel * (getgenv().GunAccuracy / 200)
                args[2] = Pos
            end
        end
        return oldInvoke(unpack(args))
    end
end
setupSilentAim()

print("UI fully loaded with all features!")
